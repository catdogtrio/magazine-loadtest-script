package requests

import io.gatling.core.Predef._
import io.gatling.http.Predef._
import io.gatling.http.request.builder.HttpRequestBuilder

/** Represents requests for creating new article */
object MagazineContentApiRequests {

  val getEnAdminContent: HttpRequestBuilder = http("GET /en/admin/content")
    .get("/en/admin/content")
    .check(status.is(200))

  val getEnNodeAdd: HttpRequestBuilder = http("GET /en/node/add")
    .get("/en/node/add")
    .check(status.is(200))

  val getEnNodeAddArticle: HttpRequestBuilder = http("GET /en/node/add/article")
    .get("/en/node/add/article")
    .check(status.is(200))
    .check(regex("\"form_build_id\" value=\"([^\"]+)\"\\/>").ofType[String].saveAs("form_build_id"))
    .check(regex("\"form_token\" value=\"([^\"]+)\"\\/>").ofType[String].saveAs("main_form_token"))
    .check(bodyString.saveAs("BODY"))
    .check(regex("\"theme_token\":\"([^\"]+)\"").ofType[String].saveAs("theme_token"))
    .check(regex("\"libraries\":\"([^\"]+)\"").ofType[String].saveAs("libraries"))
    .check(regex("/en/entity_reference_autocomplete/taxonomy_term/default%3Ataxonomy_term/([^\\\"]+)").ofType[String].saveAs("taxonomy_term_id"))


  val postEnNodeAddArticle1: HttpRequestBuilder = http("POST /en/node/add/article")
    .post("/en/node/add/article?ajax_form=1&_wrapper_format=drupal_ajax")
    .header("X-Requested-With", "XMLHttpRequest")
    .header("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8")
    .header("Accept", "application/json, text/javascript, */*; q=0.01")
    .formParam("changed", "${timestamp}")
    .formParam("title[0][value]", "${article_name}")
    .formParam("form_build_id", "${form_build_id}")
    .formParam("form_token", "${main_form_token}")
    .formParam("form_id", "node_article_form")
    .formParam("field_media_image[media_library_selection]", "")
    .formParam("body[0][summary]", "")
    .formParam("body[0][value]", "")
    .formParam("body[0][format]", "basic_html")
    .formParam("langcode[0][value]", "en")
    .formParam("field_tags[target_id]", "")
    .formParam("revision_log[0][value]", "")
    .formParam("menu[title]", "")
    .formParam("menu[description]", "")
    .formParam("menu[menu_parent]", "main:")
    .formParam("menu[weight]", "0")
    .formParam("path[0][alias]", "0")
    .formParam("uid[0][target_id]", "catpower (1)")
    .formParam("created[0][value][date]", "${date}")
    .formParam("created[0][value][time]", "${time}")
    .formParam("promote[value]", "1")
    .formParam("moderation_state[0][state]", "draft")
    .formParam("_triggering_element_name", "field_media_image-media-library-open-button")
    .formParam("_triggering_element_value", "Add media")
    .formParam("_drupal_ajax", "1")
    .formParam("ajax_page_state[theme]", "claro")
    .formParam("ajax_page_state[theme_token]", "${theme_token}")
    .formParam("ajax_page_state[libraries]", "${libraries}")
    .check(status.is(200))
    .check(regex("field_media_image.u0026hash=([^\\\"]+)\\\",\\\"ajaxViews\\\"").ofType[String].saveAs("hash"))
    .check(regex("media_library_select_form_selection.*input data-drupal-selector=.u0022([^\\\\]+).u0022 type=.u0022hidden.u0022 name=.u0022form_build_id").ofType[String].saveAs("form_build_id"))
    .check(regex("edit-views-form-media-library-widget-image-form-token-.*.0022 type=.u0022hidden.u0022 name=.u0022form_token.u0022 value=.u0022([^/]+).u0022").ofType[String].saveAs("form_token"))
    .check(regex("\\\"new\\\":\\\"([^\\\"]+)").ofType[String].saveAs("new_form_build_id"))


  val postEnMediaLibrary: HttpRequestBuilder = http("POST /en/media-library")
    .post("/en/media-library?ajax_form=1&_wrapper_format=drupal_ajax&media_library_opener_id=media_library.opener.field_widget&media_library_allowed_types%5Bimage%5D=image&media_library_selected_type=image&media_library_remaining=1&media_library_opener_parameters%5Bfield_widget_id%5D=field_media_image&media_library_opener_parameters%5Bentity_type_id%5D=node&media_library_opener_parameters%5Bbundle%5D=article&media_library_opener_parameters%5Bfield_name%5D=field_media_image&hash=${hash}&views_display_id=widget&_wrapper_format=drupal_ajax")
    .header("X-Requested-With", "XMLHttpRequest")
    .header("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8")
    .header("Accept", "application/json, text/javascript, */*; q=0.01")
    .formParam("media_library_select_form[4]", "4")
    .formParam("media_library_select_form_selection", "4")
    .formParam("form_build_id", "${form_build_id}")
    .formParam("form_token", "${form_token}")
    .formParam("form_id", "views_form_media_library_widget_image")
    .formParam("_triggering_element_name", "op")
    .formParam("_triggering_element_value", "Insert selected")
    .formParam("_drupal_ajax", "1")
    .formParam("ajax_page_state[theme]", "claro")
    .formParam("ajax_page_state[theme_token]", "${theme_token}")
    .formParam("ajax_page_state[libraries]", "${libraries}")
    .check(status.is(200))

  val postEnNodeAddArticle2: HttpRequestBuilder = http("POST /en/node/add/article 2")
    .post("/en/node/add/article?ajax_form=1&_wrapper_format=drupal_ajax")
    .header("X-Requested-With", "XMLHttpRequest")
    .header("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8")
    .header("Accept", "application/json, text/javascript, */*; q=0.01")
    .formParam("changed", "${timestamp}")
    .formParam("title[0][value]", "${article_name}")
    .formParam("form_build_id", "${new_form_build_id}")
    .formParam("form_token", "${form_token}")
    .formParam("form_id", "node_article_form")
    .formParam("field_media_image[media_library_selection]", "4")
    .formParam("body[0][summary]", "4")
    .formParam("body[0][value]", "")
    .formParam("body[0][format]", "basic_html")
    .formParam("langcode[0][value]", "en")
    .formParam("field_tags[target_id]", "")
    .formParam("revision_log[0][value]", "")
    .formParam("menu[title]", "")
    .formParam("menu[description]", "")
    .formParam("menu[menu_parent]", "main:")
    .formParam("menu[weight]", "0")
    .formParam("path[0][alias]", "")
    .formParam("uid[0][target_id]", "catpower (1)")
    .formParam("created[0][value][date]", "${date}")
    .formParam("created[0][value][time]", "${time}")
    .formParam("promote[value]", "1")
    .formParam("moderation_state[0][state]", "draft")
    .formParam("_triggering_element_name", "field_media_image-media-library-update")
    .formParam("_triggering_element_value", "Update widget")
    .formParam("_drupal_ajax", "1")
    .formParam("ajax_page_state[theme]", "claro")
    .formParam("ajax_page_state[theme_token]", "${theme_token}")
    .formParam("ajax_page_state[libraries]", "${libraries}")


  val getEnEntityReferenceAutocompleteTaxonomyTermDefaultAtaxonomyTermFormId: HttpRequestBuilder = http("GET /en/entity_reference_autocomplete/taxonomy_term/default Ataxonomy_term/{taxonomy_term_id}")
    .get("/en/entity_reference_autocomplete/taxonomy_term/default%3Ataxonomy_term/${taxonomy_term_id}")
    .queryParam("q", "${letter}")
    .check(status.is(200))
//    .check(jsonPath("$[*].value").findRandom.optional.saveAs("tag_value"))


  val postEnNodeAddArticle3: HttpRequestBuilder = http("POST /en/node/add/article 3")
    .post("/en/node/add/article")
    .header("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8")
    .formParam("changed", "${timestamp}")
    .formParam("title[0][value]", "${article_name}")
    .formParam("form_build_id", "${new_form_build_id}")
    .formParam("form_token", "${main_form_token}")
    .formParam("form_id", "node_article_form")
    .formParam("field_media_image[selection][0][target_id]", "4")
    .formParam("field_media_image[media_library_selection]", "")
    .formParam("body[0][summary]", "")
    .formParam("body[0][value]", "<p><strong>Ingredients</strong>:</p><ul><li>1 packet of instant ramen noodles</li><li>2 cups water</li><li>1 large egg</li><li>1/2 cup fresh spinach or other leafy greens (optional)</li><li>1/2 cup sliced mushrooms (optional)</li><li>1 green onion, thinly sliced</li><li>1 clove garlic, minced</li><li>1/2 teaspoon ginger, minced</li><li>1 tablespoon soy sauce</li><li>1 teaspoon sesame oil</li><li>1/2 teaspoon chili paste or sriracha (optional for heat)</li><li>Protein of your choice (e.g., cooked chicken, tofu, or shrimp) - optional</li><li>Sesame seeds and nori (seaweed) strips for garnish</li></ul><p><strong>Instructions</strong>:</p><p>Boil Water: In a medium saucepan, bring 2 cups of water to a boil.<br>Cook Noodles: Add the ramen noodles (without the seasoning packet) to the boiling water and cook for 2-3 minutes until tender but still slightly firm. Drain and set aside.<br>Prepare Broth: In the same saucepan, add a little bit of oil and saut√© the garlic and ginger over medium heat until fragrant, about 1 minute.<br>Add Ingredients: Add 2 cups of water, the seasoning packet from the ramen, soy sauce, and sesame oil. Stir to combine and bring to a simmer.<br>Cook Egg: Crack the egg into a small bowl and gently slide it into the simmering broth. Let it cook for 3-4 minutes until the egg white is set but the yolk is still runny (or to your desired level of doneness).<br>Add Vegetables and Protein: If using, add the spinach, mushrooms, and any other vegetables or protein to the broth. Let it cook for 2-3 minutes until the vegetables are tender and the protein is heated through.<br>Combine: Add the cooked noodles back into the broth and stir gently to combine.<br>Serve: Ladle the ramen into a bowl, making sure to include the egg on top. Garnish with sliced green onions, sesame seeds, nori strips, and a drizzle of chili paste or sriracha if desired.</p>")
    .formParam("body[0][format]", "basic_html")
    .formParam("langcode[0][value]", "en")
    .formParam("field_tags[target_id]", "${tag_value}")
    .formParam("revision_log[0][value]", "revivsion log message loadtest")
    .formParam("menu[title]", "")
    .formParam("menu[description]", "")
    .formParam("menu[menu_parent]", "main:")
    .formParam("menu[weight]", "0")
    .formParam("path[0][alias]", "")
    .formParam("uid[0][target_id]", "catpower (1)")
    .formParam("created[0][value][date]", "${date}")
    .formParam("created[0][value][time]", "${time}")
    .formParam("promote[value]", "1")
    .formParam("moderation_state[0][state]", "draft")
    .formParam("op", "Save")
    .check(status.is(303))
    .check(header("Location").saveAs("location"))


  val getEnNodeId: HttpRequestBuilder = http("GET /en/node/{id}")
    .get("${location}")
    .check(status.is(200))
    .check(regex("<div data-contextual-id=\\\"node:node=[0-9]+:changed=([^w]+)&amp").ofType[String].saveAs("changed_timestamp"))
    .check(regex("<div data-contextual-id=\\\"node:node=([0-9]+):changed=[0-9]+&amp").ofType[String].saveAs("node_id"))
    .check(regex("<div data-contextual-id=\\\"node:node=[0-9]+:changed=[0-9]+&amp;langcode=en\\\" data-contextual-token=\\\"([^\\\"]+)").ofType[String].saveAs("data_contextual_token"))


  val postEnContextualRender: HttpRequestBuilder = http("POST /en/contextual/render")
    .post("/en/contextual/render")
    .header("Accept", "*/*")
    .header("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8")
    .formParam("ids[]", "node:node=${node_id}:changed=${changed_timestamp}&langcode=en")
    .formParam("tokens[]", "${data_contextual_token}")
    .check(status.is(200))


  val postEnHistoryNodeIdRead: HttpRequestBuilder = http("POST /en/history/{node_id}/read")
    .post("/en/history/${node_id}/read")
    .header("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8")
    .check(status.is(200))

}
